<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
<!--	<packaging>jar</packaging>--> <!-- build as .jar (or .war) -->
	<name>demo</name>
	<description>Sample projects for Spring Boot</description>
	<url/>

	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>

	<properties> <!-- env vars -->

		<java.version>17</java.version>

		<!-- TODO: other properties -->

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF- 8</project.reporting.outputEncoding>

		<!-- TODO: spring-cloud -->
		<spring-cloud.version>Edgware.RELEASE</spring-cloud.version>

		<!-- TODO: docker maven -->
		<docker.image.prefix>
			spring-boot-example-demo
		</docker.image.prefix>

	</properties>

	<dependencies>

		<!-- TODO: default dependencies -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<!-- newer version spring-web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- TODO: other dependencies -->

		<!-- older version spring-web -->
		<!--
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>5.2.6.RELEASE</version>
		</dependency>
		-->

		<!-- javax.servlet api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>4.0.1</version>
			<scope>provided</scope>
		</dependency>

		<!-- thymeleaf markup -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- TODO: database dependencies -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<!--
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>msql-connector-java</artifactId>
			<version>8.0.20</version>
		</dependency>
		-->

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>

		<!--
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-redis</artifactId>
		</dependency>
		-->

		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<!-- TODO: mailing & sms dependencies -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>

		<!-- twilio -->
		<dependency>
			<groupId>com.twilio.sdk</groupId>
			<artifactId>twilio</artifactId>
			<version>7.16.1</version>
		</dependency>

		<!-- TODO: security dependencies -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!--
		<dependency>
			<groupId>org.springframework.security.oauth</groupId>
			<artifactId>spring-security-oauth2</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-jwt</artifactId>
		</dependency>
		-->

		<!-- TODO: testing dependencies -->

		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
			<version>2.13.0</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>


		<!-- TODO: extra dependencies -->


		<!-- TODO: server dependencies -->

		<!-- hystrix - isolates points of access b/n services; stops cascading failures & provides fallback options -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-hystrix</artifactId>
		</dependency>

		<!-- TODO: spring-cloud dependencies -->

		<!-- spring-cloud config server -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-config-server</artifactId>
		</dependency>

		<!-- spring-cloud config client - (server can't be both simultaneously) -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<!-- TODO: eureka server dependencies -->

		<!-- eureka server -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka-server</artifactId>
		</dependency>

		<!-- eureka client - (server can't be both simultaneously) -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>

		<!-- TODO: zuul proxy (edge) server dependencies -->

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-zuul</artifactId>
		</dependency>

		<!-- TODO: admin & client servers - actuator dependencies -->

		<!-- actuator - provides endpoints for monitoring & managing server (admin client) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- admin client - monitored & managed by admin server (through its actuator endpoints) -->
		<dependency>
			<groupId>de.codecentric</groupId> <!-- provided by codecentric -->
			<artifactId>spring-boot-admin-starter-client</artifactId>
			<version>1.5.5</version>
		</dependency>

		<!-- admin server - for monitoring & managing all servers (this server can't be both simultaneously) -->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server</artifactId>
			<version>1.5.5</version>
		</dependency>

		<!-- admin ui - for managing admin server -->
		<dependency>
			<groupId>de.codecentric</groupId>
			<artifactId>spring-boot-admin-server-ui</artifactId>
			<version>1.5.5</version>
		</dependency>

		<!-- TODO: swagger dependencies -->

		<dependency>
			<groupId>io.springfox</groupId> <!-- provided by springfox -->
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>

		<!-- TODO: spring-cloud tracing-logs dependencies -->

		<!-- sleuth - tracing logs -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>

		<!-- sleuth-zipkin - exports sleuth logs to external zipkin-server -->
		<dependency> <!-- todo: to-add AlwaysSampler @Bean to Configurations -->
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
		</dependency>

		<!-- zipkin-server - monitors & manages sleuth logs -->
		<!-- (server can't be both simultaneously) -->
		<dependency>
			<groupId>io.zipkin.java</groupId>
			<artifactId>zipkin-server</artifactId>
		</dependency>

		<!-- zipkin ui - manages zipkin-server -->
		<dependency>
			<groupId>io.zipkin.java</groupId>
			<artifactId>zipkin-autoconfigure-ui</artifactId>
		</dependency>

		<!-- TODO: socket dependencies -->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

		<!--
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator</artifactId>
		</dependency>
		-->

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>sockjs-client</artifactId>
			<version>1.0.2</version>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>stomp-websocket</artifactId>
			<version>2.3.3</version>
		</dependency>


		<!-- TODO: batch service dependencies -->


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-batch</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
		</dependency>


		<!-- TODO: spring - apache kafka dependencies -->


		<dependency>
			<groupId>org.springframework.kafka</groupId>
			<artifactId>spring-kafka</artifactId>
			<version>2.1.0.RELEASE</version>
		</dependency>


		<!-- TODO: ui/ux dependencies -->


		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.7</version>
		</dependency>

		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.1.0</version>
		</dependency>

	</dependencies>

	<!-- TODO: management of above dependencies -->

	<dependencyManagement>

		<dependencies>

			<!-- TODO: spring-cloud dependencies -->
			<!-- TODO: required by eureka & zuul servers,  -->

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

		</dependencies>

	</dependencyManagement>

	<build>
		<plugins>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- TODO: Docker Maven plugin -->
			<plugin>

				<groupId>com.spotify</groupId> <!-- provide by spotify -->
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version>

				<configuration>
					<imageName>
						${docker.image.prefix}/${project.artifactId}
					</imageName>
					<dockerDirectory> <!-- path to Dockerfile -->
						src/main/docker
					</dockerDirectory>

					<resources>

						<resource>
							<directory>
								${project.build.directory}
							</directory>
							<includes>
								${project.build.finalName}.jar
							</includes>
						</resource>

					</resources>

				</configuration>

			</plugin>

		</plugins>
	</build>

</project>
