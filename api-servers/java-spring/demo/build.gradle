plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'

	// TODO: other plugins

	id 'docker' // deprecated - apply plugin: 'docker'

}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

/* // TODO: classpath dependencies - deprecated ?

dependencies {

	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")

	// TODO: GCP

	classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.3'

	// TODO: Docker

	classpath('se.transmode.gradle:gradle-docker:1.2')

}

*/

dependencies {

	// TODO: default dependencies

	// * deprecated compile-syntax
	// compile('org.springframework.boot:spring-boot-starter')

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'junit:junit:4.13.1'
	testImplementation 'junit:junit:4.13.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// TODO: other dependencies

	// javax.servlet api
	implementation 'javax.servlet:javax.servlet-api:4.0.1'

	// thymeleaf markup
	// compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// TODO: database dependencies

	// compile('org.springframework.boot:spring-boot-starter-jdbc')
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// compile('mysql:mysql-connector-java')
//	implementation 'mysql:mysql-connector-java' // TODO: uncomment when dependency-download ready

	// compile('org.springframework.boot:spring-boot-starter-data-redis')
//	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// h2 db
	// compile('com.h2database:h2')
	implementation 'com.h2database:h2'

	// TODO: security dependencies

	// compile('org.springframework.boot:spring-boot-starter-security')
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// compile('org.springframework.security.oauth:spring-security-oauth2')
	implementation 'org.springframework.security.oauth:spring-security-oauth2'

	// compile('org.springframework.security:spring-security-jwt')
	implementation 'org.springframework.security:spring-security-jwt'

	// TODO: testing dependencies

	// compile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
	testImplementation 'org.mockito:mockito-core:2.13.0'

	// testCompile('org.springframework.boot:spring-boot-starter-test')
	// testImplementation 'org.springframework.boot:spring-boot-starter-test' // * this testImplementation already above

	// testCompile('org.springframework.security:spring-security-test')
	testImplementation 'org.springframework.security:spring-security-test'


	// TODO: extra dependencies


	// TODO: spring-cloud dependencies

	// spring-cloud config server
	// compile ('org.springframework.cloud:spring-cloud-config-server')
	implementation 'org.springframework.cloud:spring-cloud-config-server'

	// spring-cloud config client - (server can't be both simultaneously)
	// compile ('org.springframework.cloud:spring-cloud-starter-config')
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	// TODO: eureka server dependencies

	// eureka server
	// compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
	implementation 'org.springframework.cloud:spring-cloud-starter-eureka-server'

	// eureka client - (server can't be both simultaneously)
	// compile('org.springframework.cloud:spring-cloud-starter-eureka')
	implementation 'org.springframework.cloud:spring-cloud-starter-eureka'

	// TODO: zuul proxy (edge) server dependencies

	// compile('org.springframework.cloud:spring-cloud-starter-zuul')
	implementation 'org.springframework.cloud:spring-cloud-starter-zuul'

	// TODO: admin & client servers - actuator dependencies

	// actuator - provides endpoints for monitoring & managing server (admin client)
	// compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// admin client - monitored & managed by admin server (through its actuator endpoints) - provided by codecentric
	// compile group: 'de.codecentric', name: 'spring-boot-admin-starter-client', version: '1.5.5'
	implementation 'de.codecentric:spring-boot-admin-starter-client:1.5.5'

	// admin server - for monitoring & managing all servers (this server can't be both simultaneously)
	// compile group: 'de.codecentric', name: 'spring-boot-admin-server', version: '1.5.5'
	implementation 'de.codecentric:spring-boot-admin-server:1.5.5'

	// admin server ui - for managing admin server
	// compile group: 'de.codecentric', name: 'spring-boot-admin-server-ui', version: '1.5.5'
	implementation 'de.codecentric:spring-boot-admin-server-ui:1.5.5'

	// TODO: swagger dependencies

	// compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.7.0'
	implementation 'io.springfox:springfox-swagger2:2.7.0'

	// compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.7.0'
	implementation 'io.springfox:springfox-swagger-ui:2.7.0'

}

dependencyManagement {

	// TODO: spring-cloud dependencies
	// TODO: required by eureka & zuul servers,

	imports {

		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"

	}

}

tasks.named('test') {
	useJUnitPlatform()
}

// TODO: other tasks

tasks.buildDocker(type: Docker, dependsOn: build) {
	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')

	doFirst {
		copy {
			from jar
			into stageDir
		}
	}

}